{

"ALMA ⇨ 𝑓𝑥": {
  "prefix": [
    "s.alma",
    "script.arnaud.legoux.moving.average"
  ],
  "body": [
    "// # ============================= ALMA Inputs =============================== #",
    "ALMA_Source                      = input.source( defval = close , title = \"Source\" , inline = \"00\", group = \"🌲 ALMA 🌲\")",
    "ALMA_WindowSize                  = input.int(    defval = 9     , title = \"Window\" , inline = \"00\", group = \"🌲 ALMA 🌲\")",
    "ALMA_Offset                      = input.float(  defval = 0.85  , title = \"Offset\" , inline = \"01\", group = \"🌲 ALMA 🌲\")",
    "ALMA_Sigma                       = input.float(  defval = 6.00  , title = \"Sigma\"  , inline = \"01\", group = \"🌲 ALMA 🌲\")",
    "// # ============================= ALMA Inputs =============================== #",
    "",
    "// # ========================== ALMA Calculation ============================= #",
    "ALMA =  ta.alma(series = ALMA_Source, length = ALMA_WindowSize, offset = ALMA_Offset, sigma = ALMA_Sigma) ",
    "// # ========================== ALMA Calculation ============================= #",
    "",
    "${1:// # ============================ ALMA Plotting ============================== #",
    "plot(series = ALMA, title = \"ALMA\", color = color.new(color = color.blue, transp = 0))",
    "// # ============================ ALMA Plotting ============================== #}",
    "",
    "$0"
  ],
  "description": "Arnaud Legoux Moving Average | Built-in Script"
},

"Aroon Script ⇨ 𝑓𝑥": {
  "prefix": ["s.aroon", "script.aroon"],
  "body": [
    "// # ============================ Aroon Input  =============================== #",
    "Aroon_length                = input.int(defval = 14 , title = \"Length\", inline = \"01\", group = \"⚪ Aroon ⚪\")",
    "// # ============================ Aroon Input  =============================== #",
    "",
    "// # ========================== Aroon Calculation ============================ #",
    "Aroon_upper                 = 100 * (ta.highestbars(high, Aroon_length + 1) + Aroon_length) / Aroon_length",
    "Aroon_lower                 = 100 * (ta.lowestbars(low, Aroon_length + 1) + Aroon_length) / Aroon_length",
    "// # ========================== Aroon Calculation ============================ #",
    "",
    "${1:// ============================= Plotting Aroon ============================== #",
    "plot(series = Aroon_upper, title = \"Aroon Up\"   , color = color.new(color.orange, 0))",
    "plot(series = Aroon_lower, title = \"Aroon Down\" , color = color.new(color.blue, 0))",
    "// # =========================== Plotting Aroon ============================== #}",
    "${0}"
  ],
  "description": "Aroon Script | Built-in Script"
},

"Auto Fibonnaci ⇨ 𝑓𝑥": {
  "prefix": ["s.autofib", "script.auto.fibonnaci"],
  "body": [
    "${1:// ============================= Auto Fib Inputs ============================= #",
    "depthTooltip                = \"The minimum number of bars that will be taken into account when calculating the indicator.\"",
    "depth                       = input.int(    defval = 10       , title = \"Depth\" , minval = 1 , inline = \"Pivots\" , tooltip = depthTooltip , group = \"🎨 Auto Fibonnaci 🎨\")",
    "reverse                     = input.bool(   defval = false    , title = \"Reverse\"                    , inline = \"01\"           , group = \"🎨 Auto Fibonnaci 🎨\")",
    "var extendLeft              = input.bool(   defval = false    , title = \"Extend Left | Extend Right\" , inline = \"Extend Lines\" , group = \"🎨 Auto Fibonnaci 🎨\")",
    "var extendRight             = input.bool(   defval = true     , title = \"\"                           , inline = \"Extend Lines\" , group = \"🎨 Auto Fibonnaci 🎨\")",
    "prices                      = input.bool(   defval = true     , title = \"Show Prices\"                , inline = \"02\"           , group = \"🎨 Auto Fibonnaci 🎨\")",
    "levels                      = input.bool(   defval = true     , title = \"Show Levels\"                , inline=\"Levels\"         , group = \"🎨 Auto Fibonnaci 🎨\")",
    "levelsFormat                = input.string( defval = \"Values\" , title = \"\"                , options = [\"Values\" , \"Percent\"] , inline =\"Levels\" , group = \"🎨 Auto Fibonnaci 🎨\")",
    "labelsPosition              = input.string( defval = \"Left\"   , title = \"Labels Position\" , options = [\"Left\"   , \"Right\"]   , inline = \"03\"    , group = \"🎨 Auto Fibonnaci 🎨\")",
    "// # =========================== Auto Fib Inputs ============================= #",
    "",
    "// # ======================== Auto Fib Calculation =========================== #",
    "var extending               = extend.none",
    "",
    "if extendLeft and extendRight",
    "    extending               := extend.both",
    "    extending",
    "if extendLeft and not extendRight",
    "    extending               := extend.left",
    "    extending",
    "if not extendLeft and extendRight",
    "    extending               := extend.right",
    "    extending",
    "",
    "",
    "var float upperThreshold    = 0.236",
    "var float lowerThreshold    = 1.0",
    "",
    "var line lineLastHL         = na",
    "var line lineLastLH         = na",
    "var line lineLast           = na",
    "",
    "var float iLastH            = 0",
    "var float iLastL            = 0",
    "var float pLastH            = 0",
    "var float pLastL            = 0",
    "",
    "var float[] iPivotsH        = array.new_float()",
    "var float[] iPivotsL        = array.new_float()",
    "var float[] pPivotsH        = array.new_float()",
    "var float[] pPivotsL        = array.new_float()",
    "",
    "var isHighLast              = false",
    "var float startPrice        = na",
    "var float endPrice          = na",
    "var float diff              = na",
    "",
    "pivots(src, length, isHigh) =>",
    "    l2                      = length * 2",
    "    c                       = nz(src[length])",
    "    ok                      = true",
    "    for i                   = 0 to l2 by 1",
    "        if isHigh and src[i] > c",
    "            ok              := false",
    "            ok",
    "",
    "        if not isHigh and src[i] < c",
    "            ok              := false",
    "            ok",
    "    if ok",
    "        [bar_index[length], c]",
    "    else",
    "        [int(na), float(na)]",
    "[iH, pH]                    = pivots(high, depth / 2, true)",
    "[iL, pL]                    = pivots(low, depth / 2, false)",
    "",
    "countPivotsH                = array.size(iPivotsH)",
    "countPivotsL                = array.size(iPivotsL)",
    "",
    "if countPivotsH > 0 and countPivotsL > 0",
    "    iLastH                  := array.get(iPivotsH, countPivotsH - 1)",
    "    iLastL                  := array.get(iPivotsL, countPivotsL - 1)",
    "    isHighLast              := iLastH > iLastL",
    "    iLastH                  := 1",
    "    if isHighLast",
    "        if not na(iH)",
    "            pLastH          := array.get(pPivotsH, countPivotsH - 1)",
    "            if pH > pLastH",
    "                array.set(iPivotsH, countPivotsH - 1, iH)",
    "                array.set(pPivotsH, countPivotsH - 1, pH)",
    "            iH              := na",
    "            iH",
    "    else",
    "        if not na(iL)",
    "            pLastL          := array.get(pPivotsL, countPivotsL - 1)",
    "            if pL < pLastL",
    "                array.set(iPivotsL, countPivotsL - 1, iL)",
    "                array.set(pPivotsL, countPivotsL - 1, pL)",
    "            iL              := na",
    "            iL",
    "",
    "if not na(iH)",
    "    array.push(iPivotsH, iH)",
    "    array.push(pPivotsH, pH)",
    "",
    "if not na(iL)",
    "    array.push(iPivotsL, iL)",
    "    array.push(pPivotsL, pL)",
    "",
    "pPivotsHCopy                = array.copy(pPivotsH)",
    "pPivotsLCopy                = array.copy(pPivotsL)",
    "iPivotsHCopy                = array.copy(iPivotsH)",
    "iPivotsLCopy                = array.copy(iPivotsL)",
    "",
    "if barstate.islast",
    "    for j                   = bar_index to 0 by 1",
    "        if array.size(iPivotsHCopy) == 0 or array.size(iPivotsLCopy) == 0",
    "            break",
    "",
    "        iLastH              := array.pop(iPivotsHCopy)",
    "        iLastL              := array.pop(iPivotsLCopy)",
    "",
    "        pLastH              := array.pop(pPivotsHCopy)",
    "        pLastL              := array.pop(pPivotsLCopy)",
    "",
    "        iPrevPivot          = 0.0",
    "        pPrevPivot          = 0.0",
    "",
    "        isHighLast          := iLastH > iLastL",
    "",
    "        if isHighLast",
    "            for i           = array.size(iPivotsHCopy) - 1 to 0 by 1",
    "                if i < 0",
    "                    break",
    "                else if array.get(iPivotsHCopy, i) < iLastL",
    "                    break",
    "                if array.get(pPivotsHCopy, i) > pLastH",
    "                    iLastH  := array.pop(iPivotsHCopy)",
    "                    pLastH  := array.pop(pPivotsHCopy)",
    "                    pLastH",
    "                else",
    "                    array.remove(iPivotsHCopy, i)",
    "                    array.remove(pPivotsHCopy, i)",
    "        else",
    "            for i           = array.size(iPivotsLCopy) - 1 to 0 by 1",
    "                if i < 0",
    "                    break",
    "                else if array.get(iPivotsLCopy, i) < iLastH",
    "                    break",
    "                if array.get(pPivotsLCopy, i) < pLastL",
    "                    iLastL  := array.pop(iPivotsLCopy)",
    "                    pLastL  := array.pop(pPivotsLCopy)",
    "                    pLastL",
    "                else",
    "                    array.remove(iPivotsLCopy, i)",
    "                    array.remove(pPivotsLCopy, i)",
    "",
    "        if array.size(iPivotsHCopy) == 0 or array.size(iPivotsLCopy) == 0",
    "            break",
    "",
    "        isHighLast          := iLastH > iLastL",
    "",
    "        if isHighLast",
    "            iPrevPivot      := array.get(iPivotsHCopy, array.size(iPivotsHCopy) - 1)",
    "            pPrevPivot      := array.get(pPivotsHCopy, array.size(iPivotsHCopy) - 1)",
    "            pPrevPivot",
    "        else",
    "            iPrevPivot      := array.get(iPivotsLCopy, array.size(iPivotsLCopy) - 1)",
    "            pPrevPivot      := array.get(pPivotsLCopy, array.size(iPivotsLCopy) - 1)",
    "            pPrevPivot",
    "",
    "        if isHighLast",
    "            startPrice      := pPrevPivot",
    "            endPrice        := pLastL",
    "            diff            := math.abs(startPrice - endPrice)",
    "            if pLastH > endPrice + diff * lowerThreshold or pLastH < endPrice + diff * upperThreshold",
    "                array.push(iPivotsLCopy, iLastL)",
    "                array.push(pPivotsLCopy, pLastL)",
    "                continue",
    "            line.delete(lineLastHL)",
    "            line.delete(lineLastLH)",
    "            line.delete(lineLast)",
    "            lineLastHL      := line.new(int(iPrevPivot), pPrevPivot, int(iLastL), pLastL, color=color.red, width=1, style=line.style_dashed)",
    "            lineLastLH      := line.new(int(iLastL), pLastL, int(iLastH), pLastH, color=color.green, width=1, style=line.style_dashed)",
    "            lineLast        := lineLastLH",
    "            lineLast",
    "        else",
    "            startPrice      := pPrevPivot",
    "            endPrice        := pLastH",
    "            diff            := math.abs(startPrice - endPrice)",
    "            if pLastL < endPrice - diff * lowerThreshold or pLastL > endPrice - diff * upperThreshold",
    "                array.push(iPivotsHCopy, iLastH)",
    "                array.push(pPivotsHCopy, pLastH)",
    "                continue",
    "            line.delete(lineLastHL)",
    "            line.delete(lineLastLH)",
    "            line.delete(lineLast)",
    "            lineLastLH      := line.new(int(iPrevPivot), pPrevPivot, int(iLastH), pLastH, color=color.red, width=1, style=line.style_dashed)",
    "            lineLastHL      := line.new(int(iLastH), pLastH, int(iLastL), pLastL, color=color.green, width=1, style=line.style_dashed)",
    "            lineLast        := lineLastHL",
    "            lineLast",
    "        break",
    "",
    "_draw_line(price, col) =>",
    "    var id                  = line.new(0, price, 0, price, color=col, width=1, extend=extending)",
    "    if not na(lineLast)",
    "        line.set_xy1(id, line.get_x1(lineLast), price)",
    "        line.set_xy2(id, line.get_x2(lineLast), price)",
    "",
    "_draw_label(price, txt, txtColor) =>",
    "    if not na(price)",
    "        x                   = labelsPosition == \"Left\" ? line.get_x1(lineLast) : not extendRight ? line.get_x2(lineLast) : bar_index",
    "        labelStyle          = labelsPosition == \"Left\" ? label.style_label_right : label.style_label_left",
    "        align               = labelsPosition == \"Left\" ? text.align_right : text.align_left",
    "        labelsAlignStrLeft  = txt + \"\\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \\n\"",
    "        labelsAlignStrRight = \"       \" + txt + \"\\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \\n\"",
    "        labelsAlignStr      = labelsPosition == \"Left\" ? labelsAlignStrLeft : labelsAlignStrRight",
    "        var id              = label.new(x=x, y=price, text=labelsAlignStr, textcolor=txtColor, style=labelStyle, textalign=align, color=#00000000)",
    "        label.set_xy(id, x, price)",
    "        label.set_text(id, labelsAlignStr)",
    "        label.set_textcolor(id, txtColor)",
    "",
    "_wrap(txt) =>",
    "    \"(\" + str.tostring(txt, \"#.##\") + \")\"",
    "",
    "_label_txt(level, price) =>",
    "    if not na(price)",
    "        l                   = levelsFormat == \"Values\" ? str.tostring(level) : str.tostring(level * 100) + \"%\"",
    "        (levels ? l         : \"\") + (prices ? _wrap(price) : \"\")",
    "",
    "_crossing_level(sr, r) =>",
    "    r > sr and r < sr[1] or r < sr and r > sr[1]",
    "",
    "diff                        := (isHighLast ? -1 : 1) * math.abs(startPrice - endPrice)",
    "offset                      = isHighLast ? line.get_y1(lineLastLH) - line.get_y2(lineLastLH) : line.get_y1(lineLastHL) - line.get_y2(lineLastHL)",
    "offset                      := (isHighLast ? -1 : 1) * math.abs(offset)",
    "",
    "processLevel(show, value, colorL) =>",
    "    float m                 = value",
    "    r                       = endPrice - offset + (reverse ? -1 : 1) * diff * m",
    "    if show",
    "        _draw_line(r, colorL)",
    "        _draw_label(r, _label_txt(m, r), colorL)",
    "        if _crossing_level(close, r)",
    "            alert(\"Autofib: \" + syminfo.ticker + \" crossing level \" + str.tostring(value))",
    "",
    "show_0                      = input.bool(true, \"\", inline=\"Level0\")",
    "value_0                     = input.int(0, \"\", inline=\"Level0\")",
    "color_0                     = input.color(#787b86, \"\", inline=\"Level0\")",
    "processLevel(show_0, value_0, color_0)",
    "",
    "show_0_236                  = input.bool(true, \"\", inline=\"Level0\")",
    "value_0_236                 = input.float(0.236, \"\", inline=\"Level0\")",
    "color_0_236                 = input.color(#f44336, \"\", inline=\"Level0\")",
    "processLevel(show_0_236, value_0_236, color_0_236)",
    "",
    "show_0_382                  = input.bool(true, \"\", inline=\"Level1\")",
    "value_0_382                 = input.float(0.382, \"\", inline=\"Level1\")",
    "color_0_382                 = input.color(#81c784, \"\", inline=\"Level1\")",
    "processLevel(show_0_382, value_0_382, color_0_382)",
    "",
    "show_0_5                    = input.bool(true, \"\", inline=\"Level1\")",
    "value_0_5                   = input.float(0.5, \"\", inline=\"Level1\")",
    "color_0_5                   = input.color(#4caf50, \"\", inline=\"Level1\")",
    "processLevel(show_0_5, value_0_5, color_0_5)",
    "",
    "show_0_618                  = input.bool(true, \"\", inline=\"Level2\")",
    "value_0_618                 = input.float(0.618, \"\", inline=\"Level2\")",
    "color_0_618                 = input.color(#009688, \"\", inline=\"Level2\")",
    "processLevel(show_0_618, value_0_618, color_0_618)",
    "",
    "show_0_65                   = input.bool(false, \"\", inline=\"Level2\")",
    "value_0_65                  = input.float(0.65, \"\", inline=\"Level2\")",
    "color_0_65                  = input.color(#009688, \"\", inline=\"Level2\")",
    "processLevel(show_0_65, value_0_65, color_0_65)",
    "",
    "show_0_786                  = input.bool(true, \"\", inline=\"Level3\")",
    "value_0_786                 = input.float(0.786, \"\", inline=\"Level3\")",
    "color_0_786                 = input.color(#64b5f6, \"\", inline=\"Level3\")",
    "processLevel(show_0_786, value_0_786, color_0_786)",
    "",
    "show_1                      = input.bool(true, \"\", inline=\"Level3\")",
    "value_1                     = input.int(1, \"\", inline=\"Level3\")",
    "color_1                     = input.color(#787b86, \"\", inline=\"Level3\")",
    "processLevel(show_1, value_1, color_1)",
    "",
    "show_1_272                  = input.bool(false, \"\", inline=\"Level4\")",
    "value_1_272                 = input.float(1.272, \"\", inline=\"Level4\")",
    "color_1_272                 = input.color(#81c784, \"\", inline=\"Level4\")",
    "processLevel(show_1_272, value_1_272, color_1_272)",
    "",
    "show_1_414                  = input.bool(false, \"\", inline=\"Level4\")",
    "value_1_414                 = input.float(1.414, \"\", inline=\"Level4\")",
    "color_1_414                 = input.color(#f44336, \"\", inline=\"Level4\")",
    "processLevel(show_1_414, value_1_414, color_1_414)",
    "",
    "show_1_618                  = input.bool(true, \"\", inline=\"Level5\")",
    "value_1_618                 = input.float(1.618, \"\", inline=\"Level5\")",
    "color_1_618                 = input.color(#2196f3, \"\", inline=\"Level5\")",
    "processLevel(show_1_618, value_1_618, color_1_618)",
    "",
    "show_1_65                   = input.bool(false, \"\", inline=\"Level5\")",
    "value_1_65                  = input.float(1.65, \"\", inline=\"Level5\")",
    "color_1_65                  = input.color(#2196f3, \"\", inline=\"Level5\")",
    "processLevel(show_1_65, value_1_65, color_1_65)",
    "",
    "show_2_618                  = input.bool(true, \"\", inline=\"Level6\")",
    "value_2_618                 = input.float(2.618, \"\", inline=\"Level6\")",
    "color_2_618                 = input.color(#f44336, \"\", inline=\"Level6\")",
    "processLevel(show_2_618, value_2_618, color_2_618)",
    "",
    "show_2_65                   = input.bool(false, \"\", inline=\"Level6\")",
    "value_2_65                  = input.float(2.65, \"\", inline=\"Level6\")",
    "color_2_65                  = input.color(#f44336, \"\", inline=\"Level6\")",
    "processLevel(show_2_65, value_2_65, color_2_65)",
    "",
    "show_3_618                  = input.bool(true, \"\", inline=\"Level7\")",
    "value_3_618                 = input.float(3.618, \"\", inline=\"Level7\")",
    "color_3_618                 = input.color(#9c27b0, \"\", inline=\"Level7\")",
    "processLevel(show_3_618, value_3_618, color_3_618)",
    "",
    "show_3_65                   = input.bool(false, \"\", inline=\"Level7\")",
    "value_3_65                  = input.float(3.65, \"\", inline=\"Level7\")",
    "color_3_65                  = input.color(#9c27b0, \"\", inline=\"Level7\")",
    "processLevel(show_3_65, value_3_65, color_3_65)",
    "",
    "show_4_236                  = input.bool(true, \"\", inline=\"Level8\")",
    "value_4_236                 = input.float(4.236, \"\", inline=\"Level8\")",
    "color_4_236                 = input.color(#e91e63, \"\", inline=\"Level8\")",
    "processLevel(show_4_236, value_4_236, color_4_236)",
    "",
    "show_4_618                  = input.bool(false, \"\", inline=\"Level8\")",
    "value_4_618                 = input.float(4.618, \"\", inline=\"Level8\")",
    "color_4_618                 = input.color(#81c784, \"\", inline=\"Level8\")",
    "processLevel(show_4_618, value_4_618, color_4_618)",
    "",
    "show_neg_0_236              = input.bool(false, \"\", inline=\"Level9\")",
    "value_neg_0_236             = input.float(-0.236, \"\", inline=\"Level9\")",
    "color_neg_0_236             = input.color(#f44336, \"\", inline=\"Level9\")",
    "processLevel(show_neg_0_236, value_neg_0_236, color_neg_0_236)",
    "",
    "show_neg_0_382              = input.bool(false, \"\", inline=\"Level9\")",
    "value_neg_0_382             = input.float(-0.382, \"\", inline=\"Level9\")",
    "color_neg_0_382             = input.color(#81c784, \"\", inline=\"Level9\")",
    "processLevel(show_neg_0_382, value_neg_0_382, color_neg_0_382)",
    "",
    "show_neg_0_618              = input.bool(false, \"\", inline=\"Level10\")",
    "value_neg_0_618             = input.float(-0.618, \"\", inline=\"Level10\")",
    "color_neg_0_618             = input.color(#009688, \"\", inline=\"Level10\")",
    "processLevel(show_neg_0_618, value_neg_0_618, color_neg_0_618)",
    "",
    "show_neg_0_65               = input.bool(false, \"\", inline=\"Level10\")",
    "value_neg_0_65              = input.float(-0.65, \"\", inline=\"Level10\")",
    "color_neg_0_65              = input.color(#009688, \"\", inline=\"Level10\")",
    "processLevel(show_neg_0_65, value_neg_0_65, color_neg_0_65)",
    "// # ======================== Auto Fib Calculation =========================== #}",
    "${0}"
  ],
  "description": "Auto Fibonnaci | Built-in Script"
},

"Directional Movement Index ⇨ 𝑓𝑥": {
  "prefix": ["s.adx", "s.dmi", "script.directional.movement.index"],
  "body": [
    "// # =================== Directional Moving Index Inputs ===================== #",
    "di_lenght                   = input.int(defval = 17, title = \"DI Length\",     minval = 1,              inline = \"01\",  group = \"🟠 ADX 🟠\")",
    "sigma_length                = input.int(defval = 14, title = \"ADX Smoothing\", minval = 1, maxval = 50, inline = \"02\",  group = \"🟠 ADX 🟠\")",
    "// # =================== Directional Moving Index Inputs ===================== #",
    "",
    "// # ================ Directional Moving Index Calculation =================== #",
    "[DIplus, DIminus, ADX]      = ta.dmi(di_lenght, sigma_length)",
    "// # ================ Directional Moving Index Calculation =================== #",
    "${1:",
    "// # ================== Directional Moving Index Plotting ==================== #",
    "plot(series = ADX,     color = color.new(color.blue, 0),  title = \"ADX\")",
    "plot(series = DIminus, color = color.new(color.red, 0),   title = \"+DI\")",
    "plot(series = DIplus,  color = color.new(color.lime, 0),  title = \"-DI\")",
    "// # ================== Directional Moving Index Plotting ==================== #}",
    "${0}"
  ],
  "description": "Directional Movement Index | Built-in Script"
},

"Average True Range ⇨ 𝑓𝑥": {
  "prefix": ["s.atr", "script.average.true.range"],
  "body": [
    "// # ============================= ATR Inputs ================================ #",
    "ATR_length                  = input.int(defval = 14,       title = \"Length\",    minval = 1,                             group = \"🟤 ATR 🟤\")",
    "ATR_smoothing               = input.string(defval = \"RMA\", title = \"Smoothing\", options = [\"RMA\", \"SMA\", \"EMA\", \"WMA\"], group = \"🟤 ATR 🟤\")",
    "// # ============================= ATR Inputs ================================ #",
    "",
    "// # ==================== ATR MA source option function ====================== #",
    "ma_function(source, ATR_length)  =>",
    "    if ATR_smoothing ==  \"RMA\"",
    "        ta.rma(source, ATR_length)",
    "    else",
    "        if ATR_smoothing ==  \"SMA\"",
    "            ta.sma(source, ATR_length)",
    "        else",
    "            if ATR_smoothing ==  \"EMA\"",
    "                ta.ema(source, ATR_length)",
    "            else",
    "                ta.wma(source, ATR_length)",
    "// # ==================== ATR MA source option function ====================== #",
    "",
    "// # ============================ ATR (R|S|E)MA ============================== #",
    "ATR_RSEma                   = ma_function(ta.tr(true)",
    "// # ============================ ATR (R|S|E)MA ============================== #       ",
    "",
    "${1:// ============================== ATR Plotting =============================== #",
    "plot(ATR_RSEma, title = \"ATR\", color = color.new(color.red, 0))",
    "// # ============================ ATR Plotting =============================== #}",
    "${0}"
  ],
  "description": "Average True Range | Built-in Script"
},

"Awesome Oscillator ⇨ 𝑓𝑥": {
  "prefix": ["s.ao", "script.awesome.oscillator"],
  "body": [
    "// # =================== Awesome Oscillator Calculation ====================== #",
    "Awesome_Oscillator          = ta.sma(hl2, 5) - ta.sma(hl2, 34)",
    "// # =================== Awesome Oscillator Calculation ====================== #",
    "",
    "${1:// ======================= Awesome Oscillator Plotting ======================= #",
    "colorChanging               = ta.change(Awesome_Oscillator) <= 0 ? #872323 : #007F0E",
    "",
    "plot(series = Awesome_Oscillator, color = color.new(colorChanging, 0) , style = plot.style_histogram)",
    "// # ===================== Awesome Oscillator Plotting ======================= #}",
    "${0}"
  ],
  "description": "Awesome Oscillator | Built-in Script"
},

"Balance Power ⇨ 𝑓𝑥": {
  "prefix": ["s.balance.power", "script.balance.power"],
  "body": [
    "// # ====================== Balance Power Calculation ======================== #",
    "Balance_Power               = (close - open) / (high - low)",
    "// # ====================== Balance Power Calculation ======================== #",
    "",
    "${1:// ========================= Balance Power Plotting ========================== #",
    "plot(series = Balance_Power, color = color.new(color.red, 0))",
    "// # ======================= Balance Power Plotting ========================== #}",
    "${0}"
  ],
  "description": "Balance Power | Built-in Script"
},

"Bollinger Bands ⇨ 𝑓𝑥": {
  "prefix": ["s.bb", "script.bollinger.bands"],
  "body": [
    "// # ============================== BB Inputs ================================ #",
    "BB_source                   = input.source( defval = close, title = \"Source\",                             inline = \"00\", group = \"🔵 Bollinger Bands 🔵\")",
    "BB_length                   = input.int(    defval = 20, title = \"Length\", minval = 1,                    inline = \"01\", group = \"🔵 Bollinger Bands 🔵\")",
    "BB_Multiplicator            = input.float(  defval = 2.0, title = \"STD\", minval = 0.001, maxval = 50,     inline = \"01\", group = \"🔵 Bollinger Bands 🔵\")",
    "BB_offset                   = input.int(    defval = 0, title =\"Offset\", minval = -500, maxval = 500,     inline = \"01\", group = \"🔵 Bollinger Bands 🔵\")",
    "// # ============================== BB Inputs ================================ #",
    "",
    "// # =========================== BB Calculation ============================== #",
    "BB_basis                    = ta.sma(source = BB_source, length = BB_length)",
    "BB_std                      = BB_Multiplicator * ta.stdev(source = BB_source, length = BB_length)",
    "BB_upper                    = BB_basis + BB_std",
    "BB_lower                    = BB_basis - BB_std",
    "// # =========================== BB Calculation ============================== #",
    "",
    "${1:// =============================== BB Plotting =============================== #",
    "plot(series = BB_basis, title = \"Basis\", color  = color.new(#FF6D00, 0), offset = BB_offset)",
    "p1                          = plot(series = BB_upper, title = \"Upper\", color = color.new(#2962FF, 0), offset = BB_offset)",
    "p2                          = plot(series = BB_lower, title = \"Lower\", color = color.new(#2962FF, 0), offset = BB_offset)",
    "fill(plot1 = p1, plot2 = p2, title = \"Background\", color = color.rgb(33, 150, 243, 95))",
    "// # ============================= BB Plotting =============================== #}",
    "${0}"
  ],
  "description": "Bollinger Bands | Built-in Script"
},

"Chaikin Money Flow ⇨ 𝑓𝑥": {
  "prefix": ["s.cmf", "script.chaikin.money.flow"],
  "body": [
    "// # ====================== Chaikin Money Flow Input ========================= #",
    "CMF_length                  = input.int(defval = 20, title = \"Lenght\", minval = 1, inline = \"00\", group = \"🟣 Chaikin Money Flow 🟣\")",
    "// # ====================== Chaikin Money Flow Input ========================= #",
    "",
    "// # =================== Chaikin Money Flow Calculation ====================== #",
    "var Cumulative_Volume       = 0.",
    "Cumulative_Volume           +=  nz(source = volume)",
    "",
    "if barstate.islast and Cumulative_Volume ==  0",
    "    runtime.error(message = \"No volume is provided by the data vendor\")",
    "",
    "CMF_ad                      = close == high and close == low or high == low ? 0 : ((2*close-low-high)/(high-low))*volume",
    "Moneyflow                   = math.sum(source = CMF_ad, length = CMF_length) / math.sum(source = volume, length = CMF_length)",
    "// # =================== Chaikin Money Flow Calculation ====================== #",
    "",
    "${1:// ======================= Chaikin Money Flow Plotting ======================= #",
    "plot(series = Moneyflow, title = \"MF\",   color = color.new(color   #43A047, transp = 0))",
    "hline(price = 0,         title = \"Zero\", color = color.new(color   #787B86, transp = 0), linestyle = hline.style_dashed)",
    "// # ===================== Chaikin Money Flow Plotting ======================= #}",
    "${0}"
  ],
  "description": "Chaikin Money Flow | Built-in Script"
},

"Chaikin Oscillator ⇨ 𝑓𝑥": {
  "prefix": ["s.co", "script.chaikin.oscillator"],
  "body": [
    "// # ====================== Chaikin Oscillator Inputs ======================== #",
    "co_short      = input.int(defval = 3  , title = \"Fast Length\" , minval = 1 , inline = \"01\" , group = \"🟪 Chaikin Oscillator 🟪\")",
    "co_long       = input.int(defval = 10 , title = \"Slow Length\" , minval = 1 , inline = \"02\" , group = \"🟪 Chaikin Oscillator 🟪\")",
    "// # ====================== Chaikin Oscillator Inputs ======================== #",
    "",
    "// # =================== Chaikin Oscillator Calculation ====================== #",
    "var cumVol =  0.00",
    "cumVol    += nz(volume)",
    "",
    "if barstate.islast and cumVol ==  0",
    "    runtime.error(\"No volume is provided by the data vendor.\")",
    "",
    "co_osc        = ta.ema(source = ta.accdist, length = co_short) - ta.ema(source = ta.accdist, length = co_long)",
    "// # =================== Chaikin Oscillator Calculation ====================== #",
    "",
    "${1:// # ===================== Chaikin Oscillator Plotting ======================= #",
    "plot(series = co_osc , title = \"Chaikin Oscillator\", color = color.new(color = #EC407A, transp = 0))",
    "hline(price = 0      , title = \"Zero\"              , color = color.new(color = #787B86, transp = 0), linestyle = hline.style_dashed)",
    "// # ===================== Chaikin Oscillator Plotting ======================= #}",
    "$0"
  ],
  "description": "Chaikin Oscillator ⇨ 𝑓𝑥"
},

"Chande Kroll Stop ⇨ 𝑓𝑥": {
  "prefix": ["s.cks", "script.chande.kroll.stop"],
  "body": [
    "// # ====================== Chande Kroll Stop Inputs ========================= #",
    "p_cks = input.int(defval = 10 , minval = 1 , title = \"High Stop Length\"  , inline = \"01\" , group = \"🟧 Chande Kroll Stop 🟧\")",
    "x_cks = input.int(defval = 1  , minval = 1 , title = \"Low Stop Length\"   , inline = \"02\" , group = \"🟧 Chande Kroll Stop 🟧\")",
    "q_cks = input.int(defval = 9  , minval = 1 , title = \"Short Stop Length\" , inline = \"03\" , group = \"🟧 Chande Kroll Stop 🟧\")",
    "// # ====================== Chande Kroll Stop Inputs ========================= #",
    "",
    "// # ==================== Chande Kroll Stop Calculation ====================== #",
    "first_high_stop  = ta.highest( source = high            , length = p_cks) - x_cks * ta.atr(length = p_cks)",
    "first_low_stop   = ta.lowest(  source = low             , length = p_cks) + x_cks * ta.atr(length = p_cks)",
    "stop_short       = ta.highest( source = first_high_stop , length = q_cks)",
    "stop_long        = ta.lowest(  source = first_low_stop  , length = q_cks)",
    "// # ==================== Chande Kroll Stop Calculation ====================== #",
    "",
    "${1:// # ===================== Chande Kroll Stop Plotting ======================== #",
    "plot(series = stop_long  , color = color.new(color = #2962FF, transp = 0))",
    "plot(series = stop_short , color = color.new(color = #FF6D00, transp = 0))",
    "// # ===================== Chande Kroll Stop Plotting ======================== #}",
    "$0"
  ],
  "description": "Chand Kroll Stop | Built-in Script"
},

"Chande Momentum Oscillator ⇨ 𝑓𝑥": {
  "prefix": ["s.cmo", "script.chandler.momentum.oscillator"],
  "body": [
    "// # ============================= CMO Inputs ================================ #",
    "cmo_length  = input.int(    defval = 9     , minval = 1 , title = \"Length\" , inline = \"01\" , group = \"🟨 Chande Momentum Oscillator 🟨\")",
    "cmo_src     = input.source( defval = close ,              title = \"Source\" , inline = \"01\" , group = \"🟨 Chande Momentum Oscillator 🟨\")",
    "// # ============================= CMO Inputs ================================ #",
    "",
    "// # =========================== CMO Calculation ============================= #",
    "momm               = ta.change(cmo_src)",
    "f1(m)              => m >= 0.0 ? m : 0.0",
    "f2(m)              => m >= 0.0 ? 0.0 : -m",
    "m1                 = f1(momm)",
    "m2                 = f2(momm)",
    "",
    "sm1                = math.sum(m1, cmo_length)",
    "sm2                = math.sum(m2, cmo_length)",
    "percent(nom, div)  => 100 * nom / div",
    "chandeMO           = percent(sm1-sm2, sm1+sm2)",
    "// # =========================== CMO Calculation ============================= #",
    "",
    "${1:// # ============================ CMO Plotting =============================== #",
    "plot(series = chandeMO , title = \"Chande MO\" , color = color.new(color = #2962FF  , transp = 0))",
    "hline(price = 0        , title=\"Zero Line\"   , color = color.new(color = #787B86  , transp = 0) , linestyle = hline.style_dashed)",
    "// # ============================ CMO Plotting =============================== #}",
    "$0"
  ],
  "description": "Chande Momentum Oscillator ⇨ 𝑓𝑥"
},

"Chop Zone ⇨ 𝑓𝑥": {
  "prefix": ["s.cz", "script.chop.zone"],
  "body": [
    "${1://@version=5",
    "//indicator(title = \"Chop Zone\", format=format.price, precision=0, timeframe=\"\", timeframe_gaps=true)}",
    "// # ========================== Chop Zone sources ============================ #",
    "cz_source                   = close",
    "cz_avg                      = hlc3",
    "// # ========================== Chop Zone sources ============================ #",
    "",
    "// # ======================== Chop Zone Calculation ========================== #",
    "pi_rad                      = math.atan(1) * 4",
    "cz_periods                  = 30",
    "cz_highestHigh              = ta.highest(length = cz_periods)",
    "cz_lowestLow                = ta.lowest(length = cz_periods)",
    "span                        = 25 / (cz_highestHigh - cz_lowestLow) * cz_lowestLow",
    "ema34                       = ta.ema(source = cz_source, length = 34)",
    "x1_ema34                    = 0",
    "x2_ema34                    = 1",
    "y1_ema34                    = 0",
    "y2_ema34                    = (ema34[1] - ema34) / cz_avg * span",
    "c_ema34                     = math.sqrt((number = (x2_ema34 - x1_ema34) * (x2_ema34 - x1_ema34) + (y2_ema34 - y1_ema34) * (y2_ema34 - y1_ema34)))",
    "emaAngle_1                  = math.round(number = (180 * math.acos((x2_ema34 - x1_ema34) / c_ema34) / pi_rad))",
    "emaAngle                    = y2_ema34 > 0? - emaAngle_1: emaAngle_1",
    "// # ======================== Chop Zone Calculation ========================== #",
    "",
    "${2:// ============================ Chop Zone Colors ============================= #",
    "colorTurquoise                #26C6DA",
    "colorDarkGreen                #43A047",
    "colorPaleGreen                #A5D6A7",
    "colorLime                     #009688",
    "colorDarkRed                  #D50000",
    "colorRed                      #E91E63",
    "colorOrange                   #FF6D00",
    "colorLightOrange              #FFB74D",
    "colorYellow                   #FDD835",
    "cz_color                    = emaAngle >= 5 ",
    "                             ? colorTurquoise    : emaAngle < 5           and emaAngle >= 3.57",
    "                             ? colorDarkGreen    : emaAngle < 3.57        and emaAngle >= 2.14",
    "                             ? colorPaleGreen    : emaAngle < 2.14        and emaAngle >= .71",
    "                             ? colorLime         : emaAngle <= -1 * 5",
    "                             ? colorDarkRed      : emaAngle > -1 * 5      and emaAngle <= -1 * 3.57",
    "                             ? colorRed          : emaAngle > -1 * 3.57   and emaAngle <= -1 * 2.14",
    "                             ? colorOrange       : emaAngle > -1 * 2.14   and emaAngle <= -1 * .71",
    "                             ? colorLightOrange  : colorYellow",
    "// # ========================== Chop Zone Colors ============================= #",
    "",
    "// # ========================= Chop Zone Plotting ============================ #",
    "plot(series = 1, color = color.new(color = cz_color, transp = 0), style  = plot.style_columns)",
    "// # ========================= Chop Zone Plotting ============================ #}",
    "${0}"
  ],
  "description": "Chop Zone | Built-in Script"
},

"Choppiness Index ⇨ 𝑓𝑥": {
  "prefix": ["s.chopindex", "script.choppiness.index"],
  "body": [
    "// # ======================= Choppiness Index Input ========================== #",
    "chin_length = input.int(defval = 14 , title  = \"length\" , minval = 1                    , inline = \"01\", group = \"🟫 Choppiness Index 🟫\")",
    "chin_offset = input.int(defval = 0  , title  = \"Offset\" , minval = -500  , maxval = 500 , inline = \"01\", group = \"🟫 Choppiness Index 🟫\")",
    "// # ======================= Choppiness Index Input ========================== #",
    "",
    "// # ==================== Choppiness Index Calculation ======================= #",
    "chin = 100 * math.log10(number = math.sum(source = ta.atr(length = 1), length = chin_length) /",
    "         (ta.highest(length = chin_length) - ta.lowest(length = chin_length)))      /",
    "          math.log10(number = chin_length)",
    "// # ==================== Choppiness Index Calculation ======================= #",
    "",
    "${1:// # ====================== Choppiness Index Plotting ======================== #",
    "plot( series = chin           , title  = \"CHOP\"       , color = color.new(#2962FF, transp = 0) , offset    = chin_offset)",
    "ch_band1 = hline(price = 61.8 , title  = \"Upper Band\" , color = color.new(#787B86, transp = 0) , linestyle = hline.style_dashed)",
    "ch_band0 = hline(price = 38.2 , title  = \"Lower Band\" , color = color.new(#787B86, transp = 0) , linestyle = hline.style_dashed)",
    "fill (hline1 = ch_band1       , hline2 = ch_band0     , color = color.rgb(33, 150, 243, 90)    , title     = \"Background\")",
    "// # ====================== Choppiness Index Plotting ======================== #}",
    "$0"
  ],
  "description": "Choppiness Index ⇨ 𝑓𝑥"
},

"Commodity Channel Index ⇨ 𝑓𝑥": {
  "prefix": ["s.cci", "script.commodity.channel.index"],
  "body": [
    "// # =================== Commodity Channel Index Inputs ====================== #",
    "cci_length  = input.int( defval = 20   , title = \"lengt\"  , minval = 1 , inline = \"01\", group = \"🟪 CCI 🟪\")",
    "cci_src     = input(     defval = hlc3 , title = \"Source\"              , inline = \"01\", group = \"🟪 CCI 🟪\")",
    "// # =================== Commodity Channel Index Inputs ====================== #",
    "",
    "// # ================= Commodity Channel Index Calculation =================== #",
    "cci_ma = ta.sma(source = cci_src, length = cci_length)",
    "cci = (cci_src - cci_ma) / (0.015 * ta.dev(source = cci_src, length = cci_length))",
    "// # ================= Commodity Channel Index Calculation =================== #",
    "",
    "${1:// # ================== Commodity Channel Index Plotting ===================== #",
    "plot( series = cci    ,  title = \"CCI\"         , color = color.new(color = #2962FF   , transp = 0))",
    "cci_b1 = hline( 100   ,  title = \"Upper Band\"  , color = color.new(color = #787B86   , transp = 0), linestyle = hline.style_dashed)",
    "cci_b0 = hline(-100   ,  title = \"Lower Band\"  , color = color.new(color = #787B86   , transp = 0), linestyle = hline.style_dashed)",
    "fill( hline1 = cci_b1 ,  hline2 = cci_b0       , color = color.rgb(33, 150, 243, 90) , title = \"Background\")",
    "// # ================== Commodity Channel Index Plotting ===================== #}",
    "$0"
  ],
  "description": "Commodity Channel Index ⇨ 𝑓𝑥"
}



}
